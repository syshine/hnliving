
@{
    ViewBag.Title = "FuncRetPar";
    Layout = "~/Areas/Study/Views/Program/Shared/_LayoutAnimeJs.cshtml";
}

<h2 class="text-light">函数返回动画参数</h2>


<div class="col-12">
    <h4 class="mt-4 text-light">DURATION（动画持续时间函数）</h4>
    <div class="code-div">
        <div id="functionBasedDuration">
            <div class="line">
                <div class="small square shadow bg-thin-citrus"></div>
                <div class="small square el bg-thin-citrus"></div>
            </div>
            <div class="line">
                <div class="small square shadow bg-thin-citrus"></div>
                <div class="small square el bg-thin-citrus"></div>
            </div>
            <div class="line">
                <div class="small square shadow bg-thin-citrus"></div>
                <div class="small square el bg-thin-citrus"></div>
            </div>
        </div>
    </div>

    <h4 class="mt-4 text-light">DELAY（延迟动画函数）</h4>
    <div class="code-div">
        <div id="functionBasedDelay">
            <div class="line">
                <div class="small square shadow bg-thin-citrus"></div>
                <div class="small square el bg-thin-citrus"></div>
            </div>
            <div class="line">
                <div class="small square shadow bg-thin-citrus"></div>
                <div class="small square el bg-thin-citrus"></div>
            </div>
            <div class="line">
                <div class="small square shadow bg-thin-citrus"></div>
                <div class="small square el bg-thin-citrus"></div>
            </div>
        </div>
    </div>

    <h4 class="mt-4 text-light">ELASTICITY(缓冲强度函数)</h4>
    <div class="code-div">
        <div id="functionBasedElasticity">
            <div class="line">
                <div class="small square shadow bg-thin-citrus"></div>
                <div class="small square el bg-thin-citrus"></div>
            </div>
            <div class="line">
                <div class="small square shadow bg-thin-citrus"></div>
                <div class="small square el bg-thin-citrus"></div>
            </div>
            <div class="line">
                <div class="small square shadow bg-thin-citrus"></div>
                <div class="small square el bg-thin-citrus"></div>
            </div>
        </div>
    </div>

    <h4 class="mt-4 text-light">综合以上</h4>
    <div class="code-div mt-5 mb-5">
        <div id="combinedFunctionBasedProp">
            <div class="line">
                <div data-duration="2000" class="square shadow bg-thin-citrus"></div>
                <div data-duration="2000" class="square el bg-thin-citrus"></div>
            </div>
            <div class="line">
                <div data-duration="2000" class="square shadow bg-thin-citrus"></div>
                <div data-duration="1500" class="square el bg-thin-citrus"></div>
            </div>
            <div class="line">
                <div data-duration="2000" class="square shadow bg-thin-citrus"></div>
                <div data-duration="1000" class="square el bg-thin-citrus"></div>
            </div>
        </div>
    </div>

</div>

<div id="theme-clr" class="invisible"></div>

@section JsCode {
    @*DURATION（动画持续时间函数）*@
    <div class="js-code" data-id="functionBasedDuration">
        // DURATION（动画持续时间函数）
        /*
        默认1000
        单位 毫秒
        类型number，function(target, index, totalTargets)
        */
        var functionBasedDuration = anime({
            targets: '#functionBasedDuration .el',
            translateX: 250,
            direction: 'alternate',
            loop: true,
            duration: function (el, i, l) {
                return 1000 + (i * 1000);
            }
        });
    </div>

    @*DELAY（延迟动画函数）*@
    <div class="js-code" data-id="functionBasedDelay">
        // DELAY（延迟动画函数）
        /*
        默认0
        单位 毫秒
        类型number，function(target, index, totalTargets)
        */
        var functionBasedDelay = anime({
            targets: '#functionBasedDelay .el',
            translateX: 250,
            direction: 'alternate',
            loop: true,
            delay: function (el, i, l) {
                return i * 100;
            }
        });
    </div>

    @*ELASTICITY(缓冲强度函数)*@
    <div class="js-code" data-id="functionBasedElasticity">
        // ELASTICITY(缓冲强度函数)
        /*
        elasticity 弹性强度
        默认 500
        类型 number，function(target, index, totalTargets)
        range[0-1000]
        */
        var functionBasedElasticity = anime({
            targets: '#functionBasedElasticity .el',
            translateX: 250,
            direction: 'alternate',
            loop: true,
            elasticity: function (el, i, l) {
                return (200 + i * 200);
            }
        });
    </div>

    @*综合以上*@
    <div class="js-code" data-id="combinedFunctionBasedProp">        
        // 综合以上
        var combinedFunctionBasedProp = anime({
            targets: '#combinedFunctionBasedProp .el',
            translateX: 250,
            rotate: 180,
            duration: function (target) {
                // Duration based on every div 'data-duration' attribute
                return target.getAttribute('data-duration');
            },
            delay: function (target, index) {
                // 100ms delay multiplied by every div index, in ascending order
                return index * 100;
            },
            elasticity: function (target, index, totalTargets) {
                // Elasticity multiplied by every div index, in descending order
                return 200 + ((totalTargets - index) * 200);
            },
            direction: 'alternate',
            loop: true
        });
    </div>
}

@section scripts {

<script>
    // DURATION（动画持续时间函数）
    function funcDuration() {
        /*
        默认1000
        单位 毫秒
        类型number，function(target, index, totalTargets)
        */
        var functionBasedDuration = anime({
            targets: '#functionBasedDuration .el',
            translateX: 250,
            direction: 'alternate',
            loop: true,
            duration: function (el, i, l) {
                return 1000 + (i * 1000);
            }
        });
    }
    funcDuration();   // 立即执行

    // DELAY（延迟动画函数）
    function funcDelay() {
        /*
        默认0
        单位 毫秒
        类型number，function(target, index, totalTargets)
        */
        var functionBasedDelay = anime({
            targets: '#functionBasedDelay .el',
            translateX: 250,
            direction: 'alternate',
            loop: true,
            delay: function (el, i, l) {
                return i * 100;
            }
        });
    }
    funcDelay();   // 立即执行

    // ELASTICITY(缓冲强度函数)
    function funcElasticity() {
        /*
        elasticity 弹性强度
        默认 500
        类型 number，function(target, index, totalTargets)
        range[0-1000]
        */
        var functionBasedElasticity = anime({
            targets: '#functionBasedElasticity .el',
            translateX: 250,
            direction: 'alternate',
            loop: true,
            elasticity: function (el, i, l) {
                return (200 + i * 200);
            }
        });
    }
    funcElasticity();   // 立即执行

    // 综合以上
    function combFuncProp() {
        var combinedFunctionBasedProp = anime({
            targets: '#combinedFunctionBasedProp .el',
            translateX: 250,
            rotate: 180,
            duration: function (target) {
                // Duration based on every div 'data-duration' attribute
                return target.getAttribute('data-duration');
            },
            delay: function (target, index) {
                // 100ms delay multiplied by every div index, in ascending order
                return index * 100;
            },
            elasticity: function (target, index, totalTargets) {
                // Elasticity multiplied by every div index, in descending order
                return 200 + ((totalTargets - index) * 200);
            },
            direction: 'alternate',
            loop: true
        });
    }
    combFuncProp();   // 立即执行

    $(document).ready(function () {
        // DURATION（动画持续时间函数）
        $('#functionBasedDuration').click(function () {
            $(this).find('.el').css('transform', 'translateX(0px)');
            funcDuration();
        })

        // DELAY（延迟动画函数） 单击再次动作
        $('#functionBasedDelay').click(function () {
            $(this).find('.el').css('transform', 'translateX(0px)');
            funcDelay();
        })

        // ELASTICITY(缓冲强度函数) 单击再次动作
        $('#functionBasedElasticity').click(function () {
            $(this).find('.el').css('transform', 'translateX(0px)');
            funcElasticity();
        })

        // 综合以上 单击再次动作
        $('#combinedFunctionBasedProp').click(function () {
            $(this).find('.el').css('transform', 'translateX(0px)');
            combFuncProp();
        })

        // 主题色
        $("#theme-clr").css('color', '#A6FF8F');
    });
</script>

}