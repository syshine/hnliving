<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - Study Bootstrap</title>
    @*<link rel="shortcut icon" href="~/Images/Icons/lg.ico" />*@
    @*<link rel="bookmark" href="~/Images/Icons/lg.ico" type="image/x-icon"/>*@ 
    @Styles.Render("~/Content/css")
    @*@Scripts.Render("~/bundles/modernizr")*@
    @RenderSection("csses", required: false)
    @RenderSection("scriptsHead", required: false)

    <style>
        /*固定到底部*/
        .bottom-fixed {
            position: fixed;
            z-index: 100;
            bottom: 0;
            left: 0;
            right: 0;
        }

        /*底部代码固定开关*/
        .btm-fix-toggler {
            position: fixed;
            z-index: 101;
            bottom: 0;
            left: 0;
            padding: 0.5rem 1rem;
            font-size:25px; /*bootstrap中的图标，是用字体的形式表示的，改变大小只需要设置它的font-size就行*/
            background-color:lightgray;
        }

        /*左侧导航栏开关*/
        .left-nav-toggler {
            position: fixed;
            z-index: 200;
            left:0;
            font-size:25px; /*bootstrap中的图标，是用字体的形式表示的，改变大小只需要设置它的font-size就行*/
            background-color:lightgray;

            /*滑动效果*/
            transition:left .3s linear;
            -moz-transition:left .3s linear;     /* Firefox 4 */
            -webkit-transition:left .3s linear;  /* Safari and Chrome */
            -o-transition:left .3s linear;       /* Opera */
        }

        .left-nav-toggler-expand {
            left: 50%;
        }

        .show-code-height {
            min-height:50px;
            max-height:50vh; /*500px;*/
        }

        .show-code-wrap-height {
            min-height:50px;
            max-height:60vh;
        }

        .nav-tabs .nav-link {
            /*border: 1px solid transparent;
            border-top-left-radius: 0.25rem;
            border-top-right-radius: 0.25rem;*/
            background-color: #fff;
            border-color: #e9ecef #e9ecef #dee2e6;
        }

        .nav-tabs .nav-link.active, .nav-tabs .nav-item.show .nav-link {
            /*color: #495057;*/
            background-color: #d1ecf1;
            border-color: #bee5eb #dee2e6 #d1ecf1;
            /*border-color: #dee2e6 #dee2e6 #fff;*/
        }

        
        .square,
        .circle {
            pointer-events: none;
            position: relative;
            width: 28px;
            height: 28px;
            margin: 1px;
            font-size: 12px;
        }

        .circle {
          border-radius: 50%;
        }

        .triangle {
          pointer-events: none;
          position: relative;
          width: 0;
          height: 0;
          border-style: solid;
          border-width: 0 14px 24px 14px;
          border-color: transparent transparent currentColor transparent;
        }

        .player {
            opacity: .4;
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -webkit-box-align: center;
            -ms-flex-align: center;
            align-items: center;
            -webkit-box-pack: center;
            -ms-flex-pack: center;
            /*justify-content: center;*/
            padding-top: 20px;
            padding-bottom: 10px;
        }

        .player button {
            position: relative;
            display: block;
            margin: 0 0 0 -1px;
            padding: 5px 10px;
            font-size: 12px;
            text-transform: uppercase;
            border: 1px solid currentColor;
            background-color: transparent;
            color: currentColor;
        }

        .player button:focus {
            outline: none;
        }

        .active .player {
            opacity: 1;
        }

        .active .player button:hover:after {
            content: '';
            opacity: .3;
            position: absolute;
            left: 0;
            top: 0;
            display: block;
            width: 100%;
            height: 100%;
            background-color: currentColor;
        }

        .player button:first-child {
            margin-left: 0;
        }

        .player input {
            margin-left: 10px;
        }

        .small {
            width: 18px;
            height: 18px;
        }

        .large {
            width: 48px;
            height: 48px;
        }

        .line {
          width: 100%;
          padding: 1px 0px;
        }

        .shadow {
          position: absolute;
          opacity: .2;
        }

        .small-min-height {
            min-height: 100px;
        }

        .medium-min-height {
            min-height: 200px;
        }


        /*razor语法和媒体查询符号冲突，需使用两个at*/
        @@media screen and (max-width: 767.98px) {
            .left-nav-fixed {
                position: fixed;
                z-index: 200;
                left: -50%;
                
                /*滑动效果*/
                transition:left .3s linear;
                -moz-transition:left .3s linear;     /* Firefox 4 */
                -webkit-transition:left .3s linear;  /* Safari and Chrome */
                -o-transition:left .3s linear;       /* Opera */
            }

            .left-nav-fixed-expand {
                left: 0;
            }

            .scroll-y-auto {
                max-height: 550px;/*340px;*/
                overflow-y: auto;
            }

            .show-code-height {
                min-height:50px;
                /*max-height:200px;*/
            }
        }
    </style>
</head>
<body class="bg-dark text-light">
    <div class="navbar navbar-expand-md bg-dark navbar-dark fixed-top" id="navMain">
        @Html.ActionLink("琼游记", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
        <div class="navbar-header">
            <button type="button" class="navbar-toggler" data-toggle="collapse" data-target="#collapsibleNavbarMain">
                <span class="navbar-toggler-icon"></span>
            </button>
        </div>
        <div class="collapse navbar-collapse" id="collapsibleNavbarMain">
            <ul class="navbar-nav">
                <li class="nav-item">@Html.ActionLink("主页", "Index", "Home", new { area = "" }, new { @class = "nav-link" })</li>
                <li class="nav-item">@Html.ActionLink("关于", "About", "Home", new { area = "" }, new { @class = "nav-link" })</li>
                <li class="nav-item">@Html.ActionLink("联系方式", "Contact", "Home", new { area = "" }, new { @class = "nav-link" })</li>
            </ul>
            @*@Html.Partial("_LoginPartial")*@
        </div>
    </div>

    @*<div style="margin-top:56px;"></div>   设置margin-top是为了不让固定的导航栏遮挡住内容*@
    <div class="left-nav-toggler d-md-none" id="left-nav-toggler">
        <i class="glyphicon glyphicon-menu-right"></i>
    </div>
    @*<ul id="aaa" class="nav nav-tabs btm-fix-toggler invisible">
        <li class="nav-item">
            <div class="nav-link bg-gray-8" id="bbb">
                <i class="glyphicon glyphicon-menu-up"></i>
            </div>
        </li>
    </ul>*@

    <div class="container-fluid body-content p-0">
        <div class="row mr-0">
            <div class="col-md-3"> @*mt-md-4*@
                <div id="leftNav" class="col-6 col-md-12 p-0 left-nav-fixed scroll-y-auto">
                    正在加载...
                </div>
            </div>
            <div class="col-md-9 ml-5 ml-md-0">
                <div class="container">
                    <div class="row">
                        @RenderBody()
                    </div>
                </div>
            </div>
        </div>
        <br />
        @*显示html代码的div参考位置*@
        <div id="ref-loc"></div>
        <div id="code-wrap" class="m-0 show-code-wrap-height">
            <ul id="tabCode" class="nav nav-tabs">
                <li class="nav-item">
                    <div class="nav-link bg-gray-8">
                        <div class="" id="btm-fix-toggler">
                            <i class="glyphicon glyphicon-menu-down"></i>
                        </div>
                    </div>
                </li>
                <li class="nav-item"><a href="#html-code" class="nav-link active show" data-toggle="tab">html</a></li>
                <li class="nav-item"><a href="#js-code" class="nav-link" data-toggle="tab">javascript</a></li>
            </ul>
            <div id="tabCodeContent" class="tab-content">
                <div class="tab-pane fade active show" id="html-code">
                    <pre id="show-code" class="alert-info m-0 show-code-height">点击实例可查看代码</pre>
                </div>
                <div class="tab-pane fade" id="js-code">
                    <pre id="show-js" class="alert-info m-0 show-code-height">点击实例可查看JavaScript代码</pre>
                </div>
            </div>
        </div>
        <hr />
    </div>
    <footer>
        <p>&copy; @DateTime.Now.Year - My ASP.NET Application</p>
    </footer>

    <div id="js-code-wrap" class="d-none">
        @RenderSection("JsCode", required: false)
    </div>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/bundles/anime-js")
    @RenderSection("scripts", required: false)

    <script src="~/Navigate/AnimeJsNav.js"></script>

    <script type="text/javascript">
        var enableFixBtm = true;

        $(document).ready(function () {
            // 设置左侧导航栏开关位置
            $("#left-nav-toggler").css("top", $("#navMain").innerHeight());//.offset({ top: $("#navMain").innerHeight(), left: 0 });

            // 绑定左侧导航栏菜单
            bindNav("leftNav", navAj);

            // 滚动条滚动事件
            $(window).scroll(function () {
                if (enableFixBtm) {
                    fixBottom();
                }
            });

            // 窗口改变大小事件
            $(window).resize(function () {
                //console.log($(document).width());
            });

            // 页面显示时先执行一次
            fixBottom();

            // 设置show-code代码
            $(".code-div").click(function () {
                // 获取和显示当前按钮的html
                var formattedHtml = HTMLFormat($(this).html());
                $("#show-code").text(formattedHtml);


                // 获取和显示当前按钮的html
                $("#show-code").text($(this).html());

                // 获取和显示当前按钮的jscode
                var jsId = $(this).children("div").eq(0).attr("id");
                var jscode = $("#js-code-wrap .js-code[data-id=" + jsId + "]").html();
                $("#show-js").text(jscode);

                // 内容变化时引起高度变化
                code_height = $("#code-wrap").height();
            });

            // 底部代码固定开关
            $("#btm-fix-toggler").click(function () {
                if (enableFixBtm) {
                    // 关闭固定
                    enableFixBtm = false;
                    $(this).children(".glyphicon").removeClass("glyphicon-menu-down").addClass("glyphicon-menu-up");
                    //$(this).addClass("btm-fix-toggler");
                    $("#code-wrap").removeClass("bottom-fixed");
                } else {
                    // 打开固定
                    enableFixBtm = true;
                    $(this).children(".glyphicon").removeClass("glyphicon-menu-up").addClass("glyphicon-menu-down");
                    //$(this).removeClass("btm-fix-toggler");
                    //$("#aaa").removeClass("invisible");
                    fixBottom();
                }
            })

            // 左侧导航栏开关
            $("#left-nav-toggler").click(function () {
                $("#leftNav").toggleClass("left-nav-fixed-expand");
                $(this).toggleClass("left-nav-toggler-expand");
                $(this).children(".glyphicon").toggleClass("glyphicon-menu-right").toggleClass("glyphicon-menu-left");
            })

            // onReady script 代码区
            @RenderSection("onready", required: false)

            //var themeClr = $("#theme-clr").css('color');
            //if (themeClr != undefined) {
            //    console.log(themeClr);
            //    $("#leftNav .list-group-item:not(.active)").css('color', themeClr);
            //    $("#leftNav .list-group-item.active").css({ 'backgroundColor': themeClr, 'borderColor': themeClr });
            //}
        });

        // 绑定导航栏
        function bindNav(id, navParam) {
            var html = "";
            if (navParam != undefined && navParam != null) {
                for (var j = 0; j < navParam.navList.length; j++) {
                    if (navParam.navList[j].hide === true) {
                        continue;
                    }

                    // 如果是当前页面，设置为活动属性
                    if (window.location.pathname.toLowerCase() != navParam.navList[j].url.toLowerCase())
                        html += "<a href='" + navParam.navList[j].url + "' class='list-group-item'>" + navParam.navList[j].title + "</a>";
                    else
                        html += "<a href='" + navParam.navList[j].url + "' class='list-group-item active'>" + navParam.navList[j].title + "</a>";

                    // 如果是当前页面，设置为活动属性
                    //if (window.location.pathname.toLowerCase() != navParam.navList[j].url.toLowerCase())
                    //    html += "<li class='nav-item'><a href='" + navParam.navList[j].url + "' class='nav-link'>" + navParam.navList[j].title + "</a></li>";
                    //else
                    //    html += "<li class='nav-item'><a href='" + navParam.navList[j].url + "' class='nav-link active'>" + navParam.navList[j].title + "</a></li>";
                }
            }
            if (html != "") {
                //console.log(html);
                $("#" + id).html(html);
            }
        }

        // 固定下边栏
        function fixBottom() {
            //获取show-wrap的高度，innerHeight包含padding，$("#show-wrap").height()不包含padding
            var code_height = $("#code-wrap").innerHeight();
            //console.log("code_height的高度：" + code_height);

            //获取 id="ref-loc" 元素，offsetTop是当前元素·距离网页窗口顶部的距离
            var offset_top = $("#ref-loc").offset().top;
            //console.log("ref-loc距离顶部的距离：" + offset_top);

            var doc_height = $(window).height();
            //console.log("height：" + doc_height);

            //获取垂直滚动的距离（scrollTop()是从顶部开始滚动产生的距离）
            var scroll_top = $(document).scrollTop();
            //console.log("滚动的距离:" + scroll_top);

            if (doc_height + scroll_top < offset_top + code_height) {
                // 到达顶部位置，动态的添加元素属性，并给元素添加相应的元素样式
                $("#code-wrap").addClass("bottom-fixed");
                $("#ref-loc").height(code_height);  // 为了防止滚动条高度变化
                //console.log("固定");
            } else {
                // 同理，把之前添加的元素移除即可
                $("#code-wrap").removeClass("bottom-fixed");
                $("#ref-loc").height("0");
                //console.log("取消固定");
            }
        }

        // 设置show-code代码
        function setShowCode(ctrl) {
            // 获取和显示当前按钮的html
            var formattedHtml = HTMLFormat($(ctrl).prop("outerHTML"));
            //console.log(formattedHtml1);
            $("#show-code").text(formattedHtml);

            // 获取和显示当前按钮的html
            //$("#show-code").text($(ctrl).prop("outerHTML"));

            // 内容变化时引起高度变化
            code_height = $("#code-wrap").height();
        }

        // html代码格式化
        var HTMLFormat = (function () {
            function style_html(html_source, indent_size, indent_character, max_char) {
                var Parser, multi_parser;

                function Parser() {

                    this.pos = 0;
                    this.token = '';
                    this.current_mode = 'CONTENT';
                    this.tags = {
                        parent: 'parent1',
                        parentcount: 1,
                        parent1: ''
                    };
                    this.tag_type = '';
                    this.token_text = this.last_token = this.last_text = this.token_type = '';


                    this.Utils = {
                        whitespace: "\n\r\t ".split(''),
                        single_token: 'br,input,link,meta,!doctype,basefont,base,area,hr,wbr,param,img,isindex,?xml,embed'.split(','),
                        extra_liners: 'head,body,/html'.split(','),
                        in_array: function (what, arr) {
                            for (var i = 0; i < arr.length; i++) {
                                if (what === arr[i]) {
                                    return true;
                                }
                            }
                            return false;
                        }
                    }

                    this.get_content = function () {
                        var char = '';
                        var content = [];
                        var space = false;
                        while (this.input.charAt(this.pos) !== '<') {
                            if (this.pos >= this.input.length) {
                                return content.length ? content.join('') : ['', 'TK_EOF'];
                            }

                            char = this.input.charAt(this.pos);
                            this.pos++;
                            this.line_char_count++;


                            if (this.Utils.in_array(char, this.Utils.whitespace)) {
                                if (content.length) {
                                    space = true;
                                }
                                this.line_char_count--;
                                continue;
                            } else if (space) {
                                if (this.line_char_count >= this.max_char) {
                                    content.push('\n');
                                    for (var i = 0; i < this.indent_level; i++) {
                                        content.push(this.indent_string);
                                    }
                                    this.line_char_count = 0;
                                } else {
                                    content.push(' ');
                                    this.line_char_count++;
                                }
                                space = false;
                            }
                            content.push(char);
                        }
                        return content.length ? content.join('') : '';
                    }

                    this.get_script = function () {
                        var char = '';
                        var content = [];
                        var reg_match = new RegExp('\<\/script' + '\>', 'igm');
                        reg_match.lastIndex = this.pos;
                        var reg_array = reg_match.exec(this.input);
                        var end_script = reg_array ? reg_array.index : this.input.length;
                        while (this.pos < end_script) {
                            if (this.pos >= this.input.length) {
                                return content.length ? content.join('') : ['', 'TK_EOF'];
                            }

                            char = this.input.charAt(this.pos);
                            this.pos++;


                            content.push(char);
                        }
                        return content.length ? content.join('') : '';
                    }
                    //检索标签
                    this.record_tag = function (tag) {
                        if (this.tags[tag + 'count']) {
                            this.tags[tag + 'count']++;
                            this.tags[tag + this.tags[tag + 'count']] = this.indent_level;
                        } else {
                            this.tags[tag + 'count'] = 1;
                            this.tags[tag + this.tags[tag + 'count']] = this.indent_level;
                        }
                        this.tags[tag + this.tags[tag + 'count'] + 'parent'] = this.tags.parent;
                        this.tags.parent = tag + this.tags[tag + 'count'];
                    }

                    this.retrieve_tag = function (tag) {
                        if (this.tags[tag + 'count']) {
                            var temp_parent = this.tags.parent;
                            while (temp_parent) {
                                if (tag + this.tags[tag + 'count'] === temp_parent) {
                                    break;
                                }
                                temp_parent = this.tags[temp_parent + 'parent'];
                            }
                            if (temp_parent) {
                                this.indent_level = this.tags[tag + this.tags[tag + 'count']];
                                this.tags.parent = this.tags[temp_parent + 'parent'];
                            }
                            delete this.tags[tag + this.tags[tag + 'count'] + 'parent'];
                            delete this.tags[tag + this.tags[tag + 'count']];
                            if (this.tags[tag + 'count'] == 1) {
                                delete this.tags[tag + 'count'];
                            } else {
                                this.tags[tag + 'count']--;
                            }
                        }
                    }
                    //得到的标签
                    this.get_tag = function () {
                        var char = '';
                        var content = [];
                        var space = false;

                        do {
                            if (this.pos >= this.input.length) {
                                return content.length ? content.join('') : ['', 'TK_EOF'];
                            }

                            char = this.input.charAt(this.pos);
                            this.pos++;
                            this.line_char_count++;

                            if (this.Utils.in_array(char, this.Utils.whitespace)) {
                                space = true;
                                this.line_char_count--;
                                continue;
                            }

                            if (char === "'" || char === '"') {
                                if (!content[1] || content[1] !== '!') {
                                    char += this.get_unformatted(char);
                                    space = true;
                                }
                            }

                            if (char === '=') {
                                space = false;
                            }

                            if (content.length && content[content.length - 1] !== '=' && char !== '>' && space) {
                                if (this.line_char_count >= this.max_char) {
                                    this.print_newline(false, content);
                                    this.line_char_count = 0;
                                } else {
                                    content.push(' ');
                                    this.line_char_count++;
                                }
                                space = false;
                            }
                            content.push(char);
                        } while (char !== '>');

                        var tag_complete = content.join('');
                        var tag_index;
                        if (tag_complete.indexOf(' ') != -1) {
                            tag_index = tag_complete.indexOf(' ');
                        } else {
                            tag_index = tag_complete.indexOf('>');
                        }
                        var tag_check = tag_complete.substring(1, tag_index).toLowerCase();
                        if (tag_complete.charAt(tag_complete.length - 2) === '/' || this.Utils.in_array(tag_check, this.Utils.single_token)) {
                            this.tag_type = 'SINGLE';
                        } else if (tag_check === 'script') {
                            this.record_tag(tag_check);
                            this.tag_type = 'SCRIPT';
                        } else if (tag_check === 'style') {
                            this.record_tag(tag_check);
                            this.tag_type = 'STYLE';
                        } else if (tag_check.charAt(0) === '!') {
                            if (tag_check.indexOf('[if') != -1) {
                                if (tag_complete.indexOf('!IE') != -1) {
                                    var comment = this.get_unformatted('-->', tag_complete);
                                    content.push(comment);
                                }
                                this.tag_type = 'START';
                            } else if (tag_check.indexOf('[endif') != -1) {
                                this.tag_type = 'END';
                                this.unindent();
                            } else if (tag_check.indexOf('[cdata[') != -1) {
                                var comment = this.get_unformatted(']]>', tag_complete);
                                content.push(comment);
                                this.tag_type = 'SINGLE';
                            } else {
                                var comment = this.get_unformatted('-->', tag_complete);
                                content.push(comment);
                                this.tag_type = 'SINGLE';
                            }
                        } else {
                            if (tag_check.charAt(0) === '/') {
                                this.retrieve_tag(tag_check.substring(1));
                                this.tag_type = 'END';
                            } else {
                                this.record_tag(tag_check);
                                this.tag_type = 'START';
                            }
                            if (this.Utils.in_array(tag_check, this.Utils.extra_liners)) {
                                this.print_newline(true, this.output);
                            }
                        }
                        return content.join('');
                    }
                    //获取格式化恢复
                    this.get_unformatted = function (delimiter, orig_tag) {
                        if (orig_tag && orig_tag.indexOf(delimiter) != -1) {
                            return '';
                        }
                        var char = '';
                        var content = '';
                        var space = true;
                        do {


                            char = this.input.charAt(this.pos);
                            this.pos++

                            if (this.Utils.in_array(char, this.Utils.whitespace)) {
                                if (!space) {
                                    this.line_char_count--;
                                    continue;
                                }
                                if (char === '\n' || char === '\r') {
                                    content += '\n';
                                    for (var i = 0; i < this.indent_level; i++) {
                                        content += this.indent_string;
                                    }
                                    space = false;
                                    this.line_char_count = 0;
                                    continue;
                                }
                            }
                            content += char;
                            this.line_char_count++;
                            space = true;


                        } while (content.indexOf(delimiter) == -1);
                        return content;
                    }

                    this.get_token = function () {
                        var token;

                        if (this.last_token === 'TK_TAG_SCRIPT') {
                            var temp_token = this.get_script();
                            if (typeof temp_token !== 'string') {
                                return temp_token;
                            }
                            //token = js_beautify(temp_token, this.indent_size, this.indent_character, this.indent_level);
                            //return [token, 'TK_CONTENT'];
                            return [temp_token, 'TK_CONTENT'];
                        }
                        if (this.current_mode === 'CONTENT') {
                            token = this.get_content();
                            if (typeof token !== 'string') {
                                return token;
                            } else {
                                return [token, 'TK_CONTENT'];
                            }
                        }

                        if (this.current_mode === 'TAG') {
                            token = this.get_tag();
                            if (typeof token !== 'string') {
                                return token;
                            } else {
                                var tag_name_type = 'TK_TAG_' + this.tag_type;
                                return [token, tag_name_type];
                            }
                        }
                    }

                    this.printer = function (js_source, indent_character, indent_size, max_char) {
                        this.input = js_source || '';
                        this.output = [];
                        this.indent_character = indent_character || ' ';
                        this.indent_string = '';
                        this.indent_size = indent_size || 2;
                        this.indent_level = 0;
                        this.max_char = max_char || 70;
                        this.line_char_count = 0;
                        for (var i = 0; i < this.indent_size; i++) {
                            this.indent_string += this.indent_character;
                        }

                        this.print_newline = function (ignore, arr) {
                            this.line_char_count = 0;
                            if (!arr || !arr.length) {
                                return;
                            }
                            if (!ignore) {
                                while (this.Utils.in_array(arr[arr.length - 1], this.Utils.whitespace)) {
                                    arr.pop();
                                }
                            }
                            arr.push('\n');
                            for (var i = 0; i < this.indent_level; i++) {
                                arr.push(this.indent_string);
                            }
                        }


                        this.print_token = function (text) {
                            this.output.push(text);
                        }

                        this.indent = function () {
                            this.indent_level++;
                        }

                        this.unindent = function () {
                            if (this.indent_level > 0) {
                                this.indent_level--;
                            }
                        }
                    }
                    return this;
                }




                multi_parser = new Parser();
                multi_parser.printer(html_source, indent_character, indent_size);
                while (true) {
                    var t = multi_parser.get_token();
                    multi_parser.token_text = t[0];
                    multi_parser.token_type = t[1];

                    if (multi_parser.token_type === 'TK_EOF') {
                        break;
                    }


                    switch (multi_parser.token_type) {
                        case 'TK_TAG_START':
                        case 'TK_TAG_SCRIPT':
                        case 'TK_TAG_STYLE':
                            multi_parser.print_newline(false, multi_parser.output);
                            multi_parser.print_token(multi_parser.token_text);
                            multi_parser.indent();
                            multi_parser.current_mode = 'CONTENT';
                            break;
                        case 'TK_TAG_END':
                            multi_parser.print_newline(true, multi_parser.output);
                            multi_parser.print_token(multi_parser.token_text);
                            multi_parser.current_mode = 'CONTENT';
                            break;
                        case 'TK_TAG_SINGLE':
                            multi_parser.print_newline(false, multi_parser.output);
                            multi_parser.print_token(multi_parser.token_text);
                            multi_parser.current_mode = 'CONTENT';
                            break;
                        case 'TK_CONTENT':
                            if (multi_parser.token_text !== '') {
                                multi_parser.print_newline(false, multi_parser.output);
                                multi_parser.print_token(multi_parser.token_text);
                            }
                            multi_parser.current_mode = 'TAG';
                            break;
                    }
                    multi_parser.last_token = multi_parser.token_type;
                    multi_parser.last_text = multi_parser.token_text;
                }
                return multi_parser.output.join('');
            }

            return function (data) {
                var dataHolder = ['__dataHolder_', [Math.random(), Math.random(), Math.random(), Math.random()].join('_').replace(/[^0-9]/g, '_'), '_'].join('_');
                var dataHolders = {};
                var index = 0;
                data = data.replace(/(\")(data:[^\"]*)(\")/g, function ($0, $1, $2, $3) {
                    var name = dataHolder + index++;
                    dataHolders[name] = $2;
                    return $1 + name + $3;
                })
                data = style_html(data, 1, '\t', 0x10000000);
                data = data.replace(new RegExp(dataHolder + '[0-9]+', 'g'), function ($0) {
                    return dataHolders[$0];
                });

                return data;
            }
        })();
    </script>
</body>
</html>